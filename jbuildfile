# Generate a redistributable binary.
dist {
    ARGS = "-Xlint:unchecked -Xlint:deprecation"  # Compiler flags.
    CLASSPATH = ".;lib/velocity.jar;lib/ogl/joml-1.10.5.jar;lib/ogl/lwjgl-glfw.jar;lib/ogl/lwjgl-opengl.jar;lib/ogl/lwjgl.jar"  # Provided classpath
    MAINFILE = "Main.java"  # Main file for javac code generation.
    ENTRYPOINT = "Main"  # Code entrypoint
    BINARY = "last_stand.jar"  # Deployment binary.

    # jBuilder must be asked to explicitly copy the build dir. Once done, it will automatically execute all ops on the new dir.
    %useoutdir

    %purge ".class"  # Erase all the stale class files.
    %jcomp "-cp" $(CLASSPATH) $(ARGS) $(MAINFILE)
    %purge ".java"  # Clean out the source files.

    # Run a provided unit with cmd or a jar
    # @jar unit args  # Provided external unit
    # @chdir  # Cmd

    # Do linking stuff. Builds the jarfile by default.
    %link $(BINARY) $(ENTRYPOINT)
    %purge ".class"  # Clean up the dir path.
    # %keepreq  # Keep dist code only.
    %linkldr "NO_WRITE_PIPE" # Copies the Java launcher into the directory and rename the current binary bin_resources
}
# Test the application build (really only for standalone development.)
test {
    ARGS = ""  # Enable debug mode.
    CLASSPATH = "."  # Provided classpath
    MAINFILE = "Main.java"  # Main file for javac code generation.

    # Allow debug extensions when requested.
    if ($(DEBUG)) {
        ARGS = "-g -Xlint:deprecation -Xlint:unchecked -Xdiags:verbose"
    }

    %purge ".class"
    %jcomp $(ARGS) "-cp" $(CLASSPATH) $(MAINFILE)
}
# Purge all of the stale cached class files.
clean {
    # Clean all of those stupid stale .class files that make jgrasp compilation a pain in the butt.
    %purge ".class"
}